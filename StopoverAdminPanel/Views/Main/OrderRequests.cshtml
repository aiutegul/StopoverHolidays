@{
	ViewData["Title"] = "OrderRequests";
}

<h2>OrderRequests</h2>

@(Html.DevExtreme().DataGrid<StopoverAdminPanel.Models.OrderRequests>()
																.DataSource(ds => ds.WebApi().OnBeforeSend("function(method, ajaxOptions) { onBeforeSendSetToken(ajaxOptions); }")
																	.RouteName("OrderRequestsApi")
																	.LoadAction("Get")
																	.InsertAction("Post")
																	.UpdateAction("Put")
																	.DeleteAction("Delete")
																	.Key("Id")
																)
																.ColumnAutoWidth(false)
																.DateSerializationFormat("yyyy-MM-ddTHH:mm:ss")
																.ShowBorders(true)
																.Paging(p => p.PageSize(10))
																.FilterRow(f => f.Visible(true))
																.HeaderFilter(f => f.Visible(true))
																.GroupPanel(p => p.Visible(true))
																.Grouping(g => g.AutoExpandAll(false))
																.RemoteOperations(true)
																.Columns(columns =>
																{

																	columns.AddFor(m => m.RegistrationNumber).FormItem(f => f.Visible(false));

																	columns.AddFor(m => m.RequestType).Lookup(lookup => lookup
																	.DataSource(ds => ds.WebApi().OnBeforeSend("function(method, ajaxOptions) { onBeforeSendSetToken(ajaxOptions); }").RouteName("OrderRequestsApi")
																	.LoadAction("RequestTypeLookup").Key("Id")).DisplayExpr("Name").ValueExpr("Id")).Visible(false);

																	columns.AddFor(m => m.RequestDate).DataType(GridColumnDataType.Date).Format("dd.MM.yyyy")
																	.FormItem(f => f.Visible(false));

																	columns.AddFor(m => m.RequestStatus).Lookup(lookup => lookup
																	.DataSource(ds => ds.WebApi().OnBeforeSend("function(method, ajaxOptions) { onBeforeSendSetToken(ajaxOptions); }").RouteName("OrderRequestsApi")
																	.LoadAction("RequestStatusLookup").Key("StatusId")).DisplayExpr("Name").ValueExpr("StatusId"))
																	.FormItem(f => f.Visible(false));

																	columns.AddFor(m => m.PartnerId).Lookup(lookup => lookup
																		   .DataSource(ds => ds.WebApi().OnBeforeSend("function(method, ajaxOptions) { onBeforeSendSetToken(ajaxOptions); }").RouteName("OrdersApi").LoadAction("PartnerLookup")
																		   .Key("Value"))
																		   .ValueExpr("Value")
																		   .DisplayExpr("Text")
																	   ).FormItem(f => f.Visible(false));

																	columns.AddFor(m => m.CityId).Lookup(lookup => lookup
																			.DataSource(ds => ds.WebApi().OnBeforeSend("function(method, ajaxOptions) { onBeforeSendSetToken(ajaxOptions); }").RouteName("HotelsApi").LoadAction("CityLookup").Key("Value"))
																			.ValueExpr("Value")
																			.DisplayExpr("Text")
																			).SetCellValue("setHotelIdValue");

																	columns.AddFor(m => m.CheckIn).DataType(GridColumnDataType.DateTime).Format("dd.MM.yyyy HH:mm");

																	columns.AddFor(m => m.CheckOut).DataType(GridColumnDataType.DateTime).Format("dd.MM.yyyy HH:mm");

																	columns.AddFor(m => m.ArriveDate).DataType(GridColumnDataType.DateTime).Format("dd.MM.yyyy HH:mm").Visible(false);

																	columns.AddFor(m => m.DepartureDate).DataType(GridColumnDataType.DateTime).Format("dd.MM.yyyy HH:mm").Visible(false);

																	columns.AddFor(m => m.HotelId).Lookup(lookup => lookup
																			.DataSource("getHotelStore")
																			.ValueExpr("Value")
																			.DisplayExpr("Text")
																		);

																	columns.AddFor(m => m.ArriveFlight).Visible(false);

																	columns.AddFor(m => m.DepartureFlight).Visible(false);

																	columns.AddFor(m => m.NumberOfPassengers).Visible(false);

																	columns.AddFor(m => m.FromAirportTransferUsed).Visible(false);

																	columns.AddFor(m => m.FromHotelTransferUsed).Visible(false);

																	columns.AddFor(m => m.DayUse);

																	columns.AddFor(m => m.Routes).Visible(false);

																	columns.AddFor(m => m.Comments);
																})
																.MasterDetail(md =>
																{
																	md.Enabled(true);
																	md.Template(@<text>
																		@*<div style="width:47%;">*@
																		<div class="master-detail-caption"><h2>Order Stopover Data for Order Request with id <%= data.Id %>:</h2></div>
																		@Html.Partial("_OrderStopoverDataForRequest")
																		<hr style="clear:both;" />
																		<div class="master-detail-caption"><h2>Order Activity Data for Order Request with id <%= data.Id %>:</h2></div>
																		@Html.Partial("_OrderActivityDataForRequest")
																		@if (User.IsInRole("Admin"))
																					{
																			<button class="btn btn-success pull-left" onclick="confirm_request(<%= data.Id %>)">Confirm Request</button>
																			<button class="btn btn-danger pull-left" onclick="reject_request(<%= data.Id %>)">Reject Request</button>
																					}
																		
																		<button class="btn btn-primary pull-left" onclick="submit_request(<%= data.Id %>)">Submit Request</button>

																		@*</div>*@
																	</text>);
																		})
																														.ColumnChooser(cc =>
																														{
																															cc.Enabled(true);
																															cc.Mode(GridColumnChooserMode.Select);
																														})

																														.Editing(e => e
																																  .AllowAdding(true)
																																  .AllowUpdating(true)
																																  .AllowDeleting(true)
																																  .UseIcons(true)
																																  .Mode(GridEditMode.Popup)
																														)
																													   .OnDataErrorOccurred("function(e) { DevExpress.ui.notify(e.error); }")
)

<script type="text/javascript">
	// Clone function variables

	var isClone = false;
	var original = null;

	// On creating new row event
	function onInitNewRow(e) {
		// implement "Clone"
		if (isClone) {
			e.data = Object.assign({}, original);
			delete e.data.Id; // remove PK property
			e.data.FirstName = null;
			e.data.LastName = null;
			isClone = false;
		}
	}
	// on selection change event
	function onSelectionChanged(e) {
		//get selected row data
		original = e.selectedRowsData[0];
	}

	function onStopoverToolbarPreparing(e) {
		var toolbarItems = e.toolbarOptions.items;

		// add duplicate button to the toolbar
		toolbarItems.unshift({
			location: 'after',
			widget: 'dxButton',
			options: {
				icon: "repeat",
				type: 'normal',
				hint: 'Duplicate a row',
				onClick: function () {
					// set clone trigger to true
					isClone = true;
					// call add new row
					$("#stpvr_datagrid").dxDataGrid("addRow");

				}
			}

		});
	}

	function onActivityToolbarPreparing(e) {
		var toolbarItems = e.toolbarOptions.items;

		// add duplicate button to the toolbar
		toolbarItems.unshift({
			location: 'after',
			widget: 'dxButton',
			options: {
				icon: "repeat",
				type: 'normal',
				hint: 'Duplicate a row',
				onClick: function () {
					// set clone trigger to true
					isClone = true;
					// call add new row
					$("#activity_datagrid").dxDataGrid("addRow");

				}
			}

		});
	}

	function getActivityTimeStore(options) {
		var dataSourceConfiguration = {
			store: DevExpress.data.AspNet.createStore({
				key: "Id",
				onBeforeSend: function (method, ajaxOptions) {
					onBeforeSendSetToken(ajaxOptions);
				},
				loadUrl: '/api/ActivityTime/Get',
			})
		};
		if (options.data) {
			dataSourceConfiguration.filter = ['ActivityId', '=', options.data.ActivityId];
		}
		return dataSourceConfiguration;
	}

	function setActivityTimeIdValue(rowData, value) {
		rowData.ActivityTimeId = null;
		this.defaultSetCellValue(rowData, value);
	}

	function getHotelStore(options) {
		var dataSourceConfiguration = {
			store: DevExpress.data.AspNet.createStore({
				key: "Value",
				loadUrl: '/api/OrderRequests/HotelLookup',
				onBeforeSend: function (method, ajaxOptions) { onBeforeSendSetToken(ajaxOptions); }
			})
		};
		if (options.data) {
			dataSourceConfiguration.filter = ['CityId', '=', options.data.CityId];
		}
		return dataSourceConfiguration;
	}

	function setHotelIdValue(rowData, value) {
		rowData.HotelId = null;
		this.defaultSetCellValue(rowData, value);
	}

	function submit_request(requestId) {
		var token = $.cookie("access_token");
		$.ajax({
			url: '/api/OrderRequests/SubmitRequest?id=' + requestId,
			type: 'PUT',
			headers: { Authorization: 'Bearer ' + token },
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				window.location.href = '/Main/OrderRequests'
			},
			error: function (data) {
				alert(data.responseJSON.Message);
			}
		});
	}

	function reject_request(requestId) {
		var token = $.cookie("access_token");
		var reject_message = prompt("Enter reason for rejection:");
		console.log(JSON.stringify(reject_message));
		$.ajax({
			url: '/api/OrderRequests/RejectRequest?id=' + requestId + "&reject_message=" + reject_message,
			type: 'PUT',
			headers: { Authorization: 'Bearer ' + token },
			contentType: 'application/json; charset=utf-8',
			//data: JSON.stringify(reject_message),
			success: function (response) {
				window.location.href = '/Main/OrderRequests'
			}
		});
	}

	function confirm_request(requestId) {
		var token = $.cookie("access_token");

		$.ajax({
			url: '/api/OrderRequests/ConfirmRequest?requestId=' + requestId,
			type: 'POST',
			headers: { Authorization: 'Bearer ' + token },
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				window.location.href = '/Main/OrderRequests'
			}
		});
	}
</script>