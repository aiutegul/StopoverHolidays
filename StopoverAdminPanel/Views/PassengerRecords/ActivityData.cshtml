@{
    ViewData["Title"] = "ActivityData";
}

<h2>ActivityData</h2>

@(Html.DevExtreme().DataGrid<StopoverAdminPanel.Models.ActivityData>()
    .ID("activity_datagrid")
    .DataSource(ds => ds.WebApi()
        .RouteName("ActivityDataApi")
        .LoadAction("Get")
        .InsertAction("Post")
        .UpdateAction("Put")
        .DeleteAction("Delete")
        .Key("Id")
    )
    .ShowBorders(true)
    .Paging(p => p.PageSize(10))
    .FilterRow(f => f.Visible(true))
    .HeaderFilter(f => f.Visible(true))
    .GroupPanel(p => p.Visible(true))
    .Grouping(g => g.AutoExpandAll(false))
    .RemoteOperations(true)
    .Columns(columns => {

        columns.AddFor(m => m.OrderId).Lookup(lookup => lookup
                .DataSource(ds => ds.WebApi().RouteName("OrderActivitiesApi").LoadAction("OrderLookup").Key("Value"))
                .ValueExpr("Value")
                .DisplayExpr("Text")
            );

        columns.AddFor(m => m.FirstName);

        columns.AddFor(m => m.LastName);

        columns.AddFor(m => m.isChild);

        columns.AddFor(m => m.ActivityId).Lookup(lookup => lookup
                .DataSource(ds => ds.WebApi().RouteName("ActivityTimesApi").LoadAction("ActivityLookup").Key("Value"))
                .ValueExpr("Value")
                .DisplayExpr("Text")
            ).SetCellValue("setActivityTimeIdValue");

        columns.AddFor(m => m.ActivityTimeId).Lookup(lookup => lookup
                .DataSource("getActivityTimeStore")
                .ValueExpr("Id")
                .DisplayExpr("Time")
            ); 

        columns.AddFor(m => m.ActivityDate);

        columns.AddFor(m => m.TransferLocation);

        columns.AddFor(m => m.TotalPrice);
    })
    .Editing(e => e
        .AllowAdding(true)
        .AllowUpdating(true)
        .AllowDeleting(true)
        .Mode(GridEditMode.Row)
        .UseIcons(true)
    )
)

<button id="btn_loadActivities" class="btn btn-success pull-right" style="margin-top: 20px;">Process Activities</button>

<script>
    function getActivityTimeStore(options) {
        var dataSourceConfiguration = {
            store: DevExpress.data.AspNet.createStore({
                key: "Id",
                loadUrl: '/api/ActivityTime/Get',
            })
        };
        if (options.data) {
            dataSourceConfiguration.filter = ['ActivityId', '=', options.data.ActivityId];
        }
        return dataSourceConfiguration;
    }
    function setActivityTimeIdValue(rowData, value) {
        rowData.ActivityTimeId = null;
        this.defaultSetCellValue(rowData, value);
    }

    $("#btn_loadActivities").click(function () {
        var gridItems = $("#activity_datagrid").dxDataGrid('instance')._controllers.data._dataSource._items;
        console.log(gridItems);
        $.ajax({
            url: '/api/ActivityData/ProcessActivities',
            type: 'POST',
            contentType: 'application/json; charset=utf-8',
            data: JSON.stringify(gridItems),
            success: function (response) {
                alert("Data added!");
                console.log(response);
            }
        })
    })
</script>
